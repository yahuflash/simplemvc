package simplemvc.command
{
	/**
	 * 指令模式接口
	 * 
	 * 指令模式让代码条件化执行，在执行之初设定好逻辑线路，在终点等待结果的完成。
	 * 例如，因某种需要取了五个服务器地址同时进行连接，而任意有一个线路联通时，
	 * 则其它线路全部cancel。这是并行的指令。
	 * 再如，在某个指令点取得了用户的角色，接下来针对角色不同执行了不同的指令集。这是树行。
	 * 
	 * 常见的指令模式有串行，并行，环形，树形：
	 * 1，串行，执行到最后一粒指令完成，即告完成;串行又可分为软串行与强串行，软串行不要求每一个指令都完成，取消则自动进入下一个;
	 *  －而强串行，则要求每一个指令都完成，才能视为指令集完成。
	 * 2，并行，同样分为软并行，与强并行，前者只要有一个指令完成，即视为指令集完成;后者则要求所有指令全部完成，才能视集合完成。
	 * 3，环形，循环执行一个系列的指令，同样分为软与强。软与强的区别，在于当遇到错误，或用户取消，或同类指令完成时，是否进入下一关节。
	 * 4，树形，每一个指令完成后，自动寻找下一个指令执行，发散式执行
	 * 
	 * fixed on 2010/06/20
	 *  
	 * @author sban
	 * 
	 */
	public interface ICommand{
		/**别名于execute*/
		function redo():Object;
		/**执行*/
		function execute():Object;

		/**派发complete事件*/
		function complete():Object;
		/**派发cancel事件*/
		function cancel():Object;
		/**派发undo事件*/
		function undo():Object;
	}
}